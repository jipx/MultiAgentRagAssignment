Practical 5 - Secure Logging with Morgan
This project demonstrates how to apply secure logging practices in an Express.js application using Morgan and rotating-file-stream.

‚úÖ Objectives
Apply Morgan for logging
Create custom tokens
Log entries to a file using a rotating file stream
Log custom exception errors in a JSON format

üì¶ Setup
Download and unzip the project files.
Navigate to firstExpressServer/.
Run the following command to install required dependencies:
npm install
npm install morgan rotating-file-stream

üîß Step-by-Step Instructions
Step 1: Console Logging with Morgan
In controller/app.js, import morgan and apply logging middleware:
const morgan = require('morgan');
app.use(morgan('combined'));

Run the server and observe Apache-style log output in the console.

Step 2: Apply Rotating Log File
Install rotating-file-stream and import necessary modules:
const fs = require('fs');
const path = require('path');
const rfs = require('rotating-file-stream');

Set up a rotating log stream (12-hour interval) and apply it:
const logDirectory = path.join(__dirname, '..', 'log');
if (!fs.existsSync(logDirectory)) {
    fs.mkdirSync(logDirectory);
}
const accessLogStream = rfs.createStream('log.txt', {
    interval: '12h',
    path: logDirectory,
});
app.use(morgan('combined', { stream: accessLogStream }));

Step 3: Create a Custom Token for Exception Logging
Add this to define a custom token:
morgan.token('exception', (req, res) => res.locals.errorMessage || '-');

Step 4: Define Custom JSON Format
Add a new format that includes method, URL, IP, and exceptions:
morgan.format('jsonFormat', (tokens, req, res) => {
    return JSON.stringify({
        exception: tokens.exception(req, res),
        method: req.method,
        url: req.originalUrl,
        ip: req.ip,
        date: new Date().toUTCString()
    });
});

Apply this format to both console and file:
app.use(morgan('jsonFormat', { stream: accessLogStream }));
app.use(morgan('jsonFormat'));

Step 5: Modify Routes to Set Error Message
In any route (e.g., /user), add this in the else block:
res.locals.errorMessage = err.toString();

Step 6: Simulate an Exception
Edit model/databaseConfig.js and intentionally set wrong credentials:
user: 'root12' // invalid user to simulate error

Test with /user and check log/log.txt for structured JSON log entries.

‚úÖ Example Log Output
No Exception:
{"exception":"-","method":"GET","url":"/user","ip":"::1","date":"Tue, 06 Oct 2020 06:32:10 GMT"}

With Exception:
{"exception":"Error: ER_ACCESS_DENIED_ERROR: Access denied for user 'root12'@'localhost' (using password: YES)","method":"GET","url":"/user","ip":"::1","date":"Tue, 06 Oct 2020 06:38:34 GMT"}

‚úÖ Test Your Application
Run the server using node server.js.
Use Postman or browser to access /user and /user/:id.
Check log/log.txt for updated structured log entries.

üéì Learning Points
Middleware Usage: How to apply and configure middleware in Express.
Logging Best Practices: Importance of logging format and location (console vs file).
Morgan Customization: Ability to define tokens and output formats, including JSON.
Error Handling: Capturing and logging runtime errors in a structured format.
Directory Management: Using path and fs modules to manage cross-platform log directories.
Security Awareness: Understanding that exposing logs improperly may leak sensitive information.

üõ†Ô∏è Troubleshooting Tips
‚ùó Logs Not Showing Up
Check if the log/ directory exists. If not, create it manually or verify directory permissions.
‚ùó No Exception in Logs
Ensure res.locals.errorMessage = err.toString(); is set in your route's error block.
Confirm your route is actually throwing an error (e.g., by using wrong DB credentials).
‚ùó Morgan Not Logging
Ensure morgan('jsonFormat') is applied after the body parser and before your routes.
‚ùó Rotating Logs Not Working
Ensure rotating-file-stream is installed: npm install rotating-file-stream
Confirm the interval is set to '12h' and that the stream path is correct.
‚ùó App Crashes on Startup
Verify all modules (morgan, fs, path, rotating-file-stream) are properly required.
Use console.log() to debug specific setup steps in app.js.
