
# 🧪 Practical 5 – Secure Logging with Morgan

This lab demonstrates how to apply **secure logging** practices in an `Express.js` application using **Morgan** and **rotating-file-stream**.

---

## ✅ Objectives

- ✅ Apply **Morgan** for logging
- ✅ Create **custom tokens**
- ✅ Log entries to a **rotating file**
- ✅ Log **exception errors** in structured **JSON** format

---

## 📦 Setup Instructions

1. **Download and unzip** the project files.
2. Navigate to the `firstExpressServer/` directory.
3. Install dependencies:

```bash
npm install
npm install morgan rotating-file-stream
```

---

## 🔧 Step-by-Step Instructions

### 🔹 Step 1: Console Logging with Morgan

In `controller/app.js`, add:

```javascript
const morgan = require('morgan');
app.use(morgan('combined'));
```

👉 Run the server and observe **Apache-style logs** in the terminal.

---

### 🔹 Step 2: Apply Rotating Log File

Import modules:

```javascript
const fs = require('fs');
const path = require('path');
const rfs = require('rotating-file-stream');
```

Configure rotating log:

```javascript
const logDirectory = path.join(__dirname, '..', 'log');
if (!fs.existsSync(logDirectory)) {
    fs.mkdirSync(logDirectory);
}
const accessLogStream = rfs.createStream('log.txt', {
    interval: '12h',
    path: logDirectory,
});

app.use(morgan('combined', { stream: accessLogStream }));
```

---

### 🔹 Step 3: Create a Custom Token

```javascript
morgan.token('exception', (req, res) => res.locals.errorMessage || '-');
```

---

### 🔹 Step 4: Define a Custom JSON Format

```javascript
morgan.format('jsonFormat', (tokens, req, res) => {
    return JSON.stringify({
        exception: tokens.exception(req, res),
        method: req.method,
        url: req.originalUrl,
        ip: req.ip,
        date: new Date().toUTCString()
    });
});
```

Apply format:

```javascript
app.use(morgan('jsonFormat', { stream: accessLogStream }));
app.use(morgan('jsonFormat'));
```

---

### 🔹 Step 5: Log Exceptions in Routes

In any route handler (e.g., `/user`):

```javascript
res.locals.errorMessage = err.toString();
```

---

### 🔹 Step 6: Simulate an Exception

In `model/databaseConfig.js`, intentionally misconfigure credentials:

```javascript
user: 'root12' // 🚫 Invalid user
```

👉 Access `/user` and verify that logs are stored in `log/log.txt`.

---

## 📝 Example Log Output

**✅ Without Exception**:
```json
{"exception":"-","method":"GET","url":"/user","ip":"::1","date":"Tue, 06 Oct 2020 06:32:10 GMT"}
```

**⚠️ With Exception**:
```json
{"exception":"Error: ER_ACCESS_DENIED_ERROR: Access denied for user 'root12'@'localhost'","method":"GET","url":"/user","ip":"::1","date":"Tue, 06 Oct 2020 06:38:34 GMT"}
```

---

## ✅ Test Your Application

- Run using: `node server.js`
- Access:
  - `http://localhost:3000/user`
  - `http://localhost:3000/user/:id`
- Check `log/log.txt` for structured JSON log entries.

---

## 🎓 Learning Points

| Topic | Description |
|-------|-------------|
| **Middleware** | Apply and configure logging middleware. |
| **Logging** | Understand file vs console logging. |
| **Morgan** | Customize tokens and formats. |
| **Error Handling** | Capture runtime errors for auditing. |
| **Filesystem** | Cross-platform directory creation and use. |
| **Security** | Avoid leaking sensitive logs improperly. |

---

## 🛠️ Troubleshooting Tips

❗ **Logs Not Showing Up**
- Ensure `log/` directory exists.
- Check file permissions.

❗ **No Exception in Logs**
- Use `res.locals.errorMessage = err.toString();`
- Trigger real errors for testing.

❗ **Morgan Not Logging**
- Must apply Morgan **after body parser**, before routes.

❗ **Rotating Logs Not Working**
- Confirm:
  - `npm install rotating-file-stream`
  - Proper `interval` and `path` config.

❗ **App Crashes on Startup**
- Double-check:
  - All required modules are installed
  - Paths are correct
- Use `console.log()` for debugging setup steps.

---

🏁 **End of Practical 5**
