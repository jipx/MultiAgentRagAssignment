{
  "questions": [
    {
      "question": "What is the primary purpose of using Morgan in this lab?",
      "choices": ["Database management", "User authentication", "Secure logging", "Frontend development"],
      "answer": "Secure logging",
      "explanation": "The lab focuses on applying secure logging practices in an Express.js application using Morgan, which is a popular HTTP request logger middleware."
    },
    {
      "question": "Which module is used to create rotating log files?",
      "choices": ["fs", "path", "morgan", "rotating-file-stream"],
      "answer": "rotating-file-stream",
      "explanation": "The rotating-file-stream module is used to create a new log file periodically, helping manage log size and prevent log overflow."
    },
    {
      "question": "What is the interval set for rotating log files in this lab?",
      "choices": ["6 hours", "12 hours", "24 hours", "48 hours"],
      "answer": "12 hours",
      "explanation": "The lab instructions specify setting up a rotating log stream with a 12-hour interval using 'interval: '12h''."
    },
    {
      "question": "Which of the following is NOT a learning point mentioned in the lab?",
      "choices": ["Middleware Usage", "Logging Best Practices", "Database Optimization", "Error Handling"],
      "answer": "Database Optimization",
      "explanation": "Database Optimization is not mentioned as a learning point in the lab. The focus is on logging, middleware usage, and error handling."
    },
    {
      "question": "What format is used for structuring log entries in this lab?",
      "choices": ["XML", "YAML", "CSV", "JSON"],
      "answer": "JSON",
      "explanation": "The lab demonstrates how to define a custom JSON format for log entries, which includes method, URL, IP, and exceptions."
    },
    {
      "question": "What is the purpose of creating a custom token named 'exception' in Morgan?",
      "choices": ["To handle database errors", "To log custom exception errors", "To create user authentication tokens", "To encrypt log files"],
      "answer": "To log custom exception errors",
      "explanation": "The custom 'exception' token is created to include custom exception error messages in the log entries."
    },
    {
      "question": "How is an exception simulated in the lab?",
      "choices": ["By creating a faulty route", "By setting wrong database credentials", "By overloading the server", "By manually throwing an error"],
      "answer": "By setting wrong database credentials",
      "explanation": "The lab instructs to edit databaseConfig.js and intentionally set wrong credentials to simulate an error."
    },
    {
      "question": "Which of the following is NOT a step in the lab instructions?",
      "choices": ["Console Logging with Morgan", "Apply Rotating Log File", "Implement User Authentication", "Create a Custom Token for Exception Logging"],
      "answer": "Implement User Authentication",
      "explanation": "Implementing User Authentication is not mentioned as a step in the lab instructions. The focus is on logging and error handling."
    },
    {
      "question": "What should you do if logs are not showing up?",
      "choices": ["Reinstall Node.js", "Check if the log/ directory exists", "Increase server memory", "Change the database"],
      "answer": "Check if the log/ directory exists",
      "explanation": "One of the troubleshooting tips suggests checking if the log/ directory exists and creating it manually if it doesn't."
    },
    {
      "question": "Where should Morgan middleware be applied in relation to other middleware?",
      "choices": ["Before body parser and after routes", "After body parser and before routes", "Before body parser and before routes", "After body parser and after routes"],
      "answer": "After body parser and before routes",
      "explanation": "The troubleshooting tips mention that Morgan should be applied after the body parser and before your routes for proper logging."
    }
  ]
}