{
  "questions": [
    {
      "question": "What is the primary purpose of using Morgan in this lab?",
      "choices": [
        "To encrypt logs",
        "For secure logging",
        "To compress log files",
        "To send logs to a remote server"
      ],
      "answer": "For secure logging",
      "explanation": "The lab demonstrates how to apply secure logging practices in an Express.js application using Morgan."
    },
    {
      "question": "Which module is used to create a rotating log stream?",
      "choices": [
        "fs",
        "path",
        "morgan",
        "rotating-file-stream"
      ],
      "answer": "rotating-file-stream",
      "explanation": "The rotating-file-stream module is used to create a rotating log stream with a 12-hour interval."
    },
    {
      "question": "What is the default logging format used when first applying Morgan?",
      "choices": [
        "combined",
        "common",
        "dev",
        "tiny"
      ],
      "answer": "combined",
      "explanation": "The lab instructions show that Morgan is initially applied using the 'combined' format: app.use(morgan('combined'));"
    },
    {
      "question": "How often does the log file rotate in this lab setup?",
      "choices": [
        "Every 6 hours",
        "Every 12 hours",
        "Every 24 hours",
        "Every week"
      ],
      "answer": "Every 12 hours",
      "explanation": "The rotating log stream is set up with a 12-hour interval: interval: '12h'."
    },
    {
      "question": "What is the purpose of creating a custom token in Morgan?",
      "choices": [
        "To encrypt log entries",
        "To log exceptions",
        "To compress logs",
        "To validate user input"
      ],
      "answer": "To log exceptions",
      "explanation": "A custom token is created to log exceptions: morgan.token('exception', (req, res) => res.locals.errorMessage || '-');"
    },
    {
      "question": "Which of the following is NOT included in the custom JSON log format?",
      "choices": [
        "method",
        "url",
        "ip",
        "user-agent"
      ],
      "answer": "user-agent",
      "explanation": "The custom JSON format includes method, URL, IP, and exceptions, but not the user-agent."
    },
    {
      "question": "What action is taken to simulate an exception in the lab?",
      "choices": [
        "Deleting a critical file",
        "Setting wrong database credentials",
        "Overloading the server",
        "Injecting malicious code"
      ],
      "answer": "Setting wrong database credentials",
      "explanation": "To simulate an error, the lab instructions suggest editing databaseConfig.js and intentionally setting wrong credentials."
    },
    {
      "question": "Where are the log files stored in this lab setup?",
      "choices": [
        "In the root directory",
        "In a 'logs' folder",
        "In a 'log' folder",
        "In the 'src' directory"
      ],
      "answer": "In a 'log' folder",
      "explanation": "The lab sets up a 'log' directory to store the log files: const logDirectory = path.join(__dirname, '..', 'log');"
    },
    {
      "question": "What is the file name of the log file created by the rotating stream?",
      "choices": [
        "access.log",
        "error.log",
        "app.log",
        "log.txt"
      ],
      "answer": "log.txt",
      "explanation": "The rotating log stream creates a file named 'log.txt': rfs.createStream('log.txt', {...});"
    },
    {
      "question": "Which of the following is a security consideration mentioned in the lab?",
      "choices": [
        "Encrypting log files",
        "Backing up logs to cloud storage",
        "Avoiding exposure of sensitive information in logs",
        "Using blockchain for log integrity"
      ],
      "answer": "Avoiding exposure of sensitive information in logs",
      "explanation": "The lab mentions under 'Learning Points' that exposing logs improperly may leak sensitive information, highlighting this security consideration."
    }
  ]
}