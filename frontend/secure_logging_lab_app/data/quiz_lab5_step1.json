{
  "questions": [
    {
      "question": "What is the primary purpose of using Morgan in this lab?",
      "choices": ["For database management", "For user authentication", "For secure logging", "For route handling"],
      "answer": "For secure logging",
      "explanation": "The lab demonstrates how to apply secure logging practices in an Express.js application using Morgan."
    },
    {
      "question": "Which npm package is used to create rotating log files?",
      "choices": ["morgan", "fs", "path", "rotating-file-stream"],
      "answer": "rotating-file-stream",
      "explanation": "The rotating-file-stream package is used to create a new log file periodically, helping manage log size."
    },
    {
      "question": "What is the default logging format used when applying Morgan initially?",
      "choices": ["dev", "combined", "common", "tiny"],
      "answer": "combined",
      "explanation": "The lab instructs to use app.use(morgan('combined')), which applies the 'combined' format for logging."
    },
    {
      "question": "How often are log files rotated in this lab setup?",
      "choices": ["Every 6 hours", "Every 12 hours", "Every 24 hours", "Every week"],
      "answer": "Every 12 hours",
      "explanation": "The lab sets up a rotating log stream with a 12-hour interval using 'interval: '12h''."
    },
    {
      "question": "What custom token is created for exception logging?",
      "choices": ["error", "exception", "log", "customError"],
      "answer": "exception",
      "explanation": "The lab defines a custom token named 'exception' using morgan.token('exception', ...)."
    },
    {
      "question": "Which of the following is NOT included in the custom JSON log format?",
      "choices": ["method", "url", "ip", "status code"],
      "answer": "status code",
      "explanation": "The custom JSON format includes method, URL, IP, and date, but not the status code."
    },
    {
      "question": "How is an exception simulated in the lab?",
      "choices": ["By creating a faulty route", "By setting wrong database credentials", "By overloading the server", "By intentionally crashing the application"],
      "answer": "By setting wrong database credentials",
      "explanation": "The lab instructs to edit databaseConfig.js and set an invalid user to simulate an error."
    },
    {
      "question": "Where are the log files stored in this project?",
      "choices": ["In the root directory", "In a 'logs' folder", "In a 'log' folder", "In the 'src' directory"],
      "answer": "In a 'log' folder",
      "explanation": "The lab creates a 'log' directory to store the log files."
    },
    {
      "question": "What is the purpose of res.locals.errorMessage in the routes?",
      "choices": ["To display errors to the user", "To set the HTTP status code", "To capture error messages for logging", "To trigger error handling middleware"],
      "answer": "To capture error messages for logging",
      "explanation": "res.locals.errorMessage is used to set the error message that will be included in the log entry."
    },
    {
      "question": "Which of the following is a key learning point from this lab?",
      "choices": ["Database optimization", "Front-end development", "Security awareness in logging", "Load balancing"],
      "answer": "Security awareness in logging",
      "explanation": "One of the learning points mentioned is understanding that exposing logs improperly may leak sensitive information, which relates to security awareness in logging."
    }
  ]
}